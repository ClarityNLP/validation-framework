# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# TODO may want a pretty welcome page besides search
GET     /                                             controllers.SearchController.index
# TODO don't need this endpoint once some things are setup
GET     /hash/:text                                   controllers.IndexController.hash(text:String)
GET     /loginForm                                    controllers.IndexController.loginForm
GET     /login                                        controllers.IndexController.loginForm
GET     /search                                       controllers.SearchController.index
GET     /searchtext/:query/:start/:rows		            controllers.SearchController.queryText(query:String, start:Int, rows:Int)
GET     /subjectdocuments/:subjectId/:highlightQuery	controllers.ChartDataController.getSubjectDocuments(subjectId:String, highlightQuery:String)
GET     /subjectrecords/:subjectId/:useSourceValue	  controllers.ChartDataController.getSubjectRecords(subjectId:String, useSourceValue:String)
GET     /subjectinfo/:subjectId/:useSourceValue	      controllers.ChartDataController.getSubjectInfo(subjectId:String, useSourceValue:String)
GET     /report/:reportId/:origQuery		              controllers.ChartDataController.getReport(reportId:String, origQuery:String)
GET     /source                                       controllers.IndexController.getSource
GET     /source/sources                               controllers.IndexController.getSources

# Annotation Table Endpoints
GET     /annotation_question/:annotationId              controllers.AnnotationController.getAnnotationQuestion(annotationId:Int)
PUT     /annotation_question/:annotationId              controllers.AnnotationController.putAnnotationQuestion(annotationId:Int)

GET     /annotation_question_answer/:annotationId       controllers.AnnotationController.getAnnotationQuestionAnswer(annotationId:Int)
PUT     /annotation_question_answer/:annotationId       controllers.AnnotationController.putAnnotationQuestionAnswer(annotationId:Int)

GET     /annotation_set/:annotationSetId                controllers.AnnotationController.getAnnotationSet(annotationSetId:Int)
PUT     /annotation_set/:annotationSetId                controllers.AnnotationController.putAnnotationSet(annotationSetId:Int)
GET     /annotation_set/name/:username                  controllers.AnnotationController.getAnnotationSetByUsername(username:String)
GET     /annotation_set                                 controllers.AnnotationController.getAllAnnotationSets()
GET     /annotation_set/question/:annotationSetDefinitionId controllers.AnnotationController.getAnnotationSetQuestion(annotationSetDefinitionId:Long)
GET     /annotation_set/name/:username/id/:validationSetId controllers.AnnotationController.getAnnotationSetByUsernameAndSetID(username:String,validationSetId:Int)
GET     /annotation_set/result/:annotationSetResultId   controllers.AnnotationController.getAnnotationSetResult(annotationSetResultId:Long)

# Validation Table Endpoints
GET     /validation/users                           controllers.ValidationController.getUsers()
GET     /validation/user/:user_id                   controllers.ValidationController.getUser(user_id:Long)

# GET     /validation/local/cohort/definition/

GET     /cohortview                             controllers.CohortController.index
GET     /cohorts                                controllers.CohortController.getCohorts()
GET     /cohortentities/:cohortId               controllers.CohortController.getCohortEntities(cohortId)
GET     /cohortdetails/                         controllers.CohortController.cohortdetails(cohortId:Option[Int], setId:Option[Int], viewOnly:Option[Boolean])
GET     /cohort/:cohortId                       controllers.CohortController.getCohortDefinition(cohortId)

# Routes necessary for play-pac4j
GET         /forceLogin                       controllers.IndexController.forceLogin()
GET         /callback                         @org.pac4j.play.CallbackController.callback()
POST        /callback                         @org.pac4j.play.CallbackController.callback()
GET         /casProxyCallback                 @org.pac4j.play.CallbackController.callback()
POST        /casProxyCallback                 @org.pac4j.play.CallbackController.callback()
GET         /logout                           @org.pac4j.play.LogoutController.logout()
GET         /centralLogout                    controllers.CentralLogoutController.logout()

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file               			controllers.Assets.versioned(path="/public", file: Asset)

# WebJars
GET         /webjars/*file                    controllers.WebJarAssets.at(file)
